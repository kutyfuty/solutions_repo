{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion is a classic application of Newton\u2019s laws in two dimensions. Let\u2019s derive the governing equations from first principles, assuming no air resistance for now (we\u2019ll revisit this later). Deriving the Equations of Motion A projectile is launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) from the horizontal. The acceleration due to gravity \\(g\\) acts downward. We break the motion into horizontal (x) and vertical (y) components: Initial conditions: Horizontal velocity: \\(v_{x0} = v_0 \\cos\\theta\\) Vertical velocity: \\(v_{y0} = v_0 \\sin\\theta\\) Initial position: \\((x_0, y_0) = (0, 0)\\) (assuming launch from the origin) Acceleration: Horizontal: \\(a_x = 0\\) Vertical: \\(a_y = -g\\) Using the kinematic equations \\(v = v_0 + at\\) and \\(s = s_0 + v_0 t + \\frac{1}{2} a t^2\\) : Horizontal motion: $$ x(t) = v_{x0} t = v_0 \\cos\\theta \\cdot t $$ Vertical motion: $$ y(t) = v_{y0} t + \\frac{1}{2} a_y t^2 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Time of Flight The projectile hits the ground when \\(y(t) = 0\\) . Solve: $$ v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 = 0 $$ Factorize: $$ t \\left( v_0 \\sin\\theta - \\frac{1}{2} g t \\right) = 0 $$ Solutions: \\(t = 0\\) (launch) or: $$ t = \\frac{2 v_0 \\sin\\theta}{g} $$ This is the time of flight \\(T\\) . Range Equation The horizontal range \\(R\\) is the distance traveled when \\(t = T\\) : $$ R = x(T) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} $$ Using the identity \\(\\sin 2\\theta = 2 \\sin\\theta \\cos\\theta\\) : $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$ Family of Solutions This equation reveals a family of solutions parameterized by: - \\(v_0\\) : Initial velocity scales the range quadratically. - \\(g\\) : Gravitational acceleration inversely affects the range. - \\(\\theta\\) : The angle determines the sinusoidal variation. 2. Analysis of the Range Dependence on Angle The term \\(\\sin 2\\theta\\) peaks at 1 when \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) , giving the maximum range: $$ R_{\\text{max}} = \\frac{v_0^2}{g} $$ - At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(\\sin 2\\theta = 0\\) , so \\(R = 0\\) . - The range is symmetric about \\(45^\\circ\\) (e.g., \\(\\theta = 30^\\circ\\) and \\(60^\\circ\\) yield the same range). Influence of Parameters Initial Velocity ( \\(v_0\\) ) : Doubling \\(v_0\\) quadruples \\(R\\) , due to the \\(v_0^2\\) term. Gravity ( \\(g\\) ) : On the Moon ( \\(g \\approx 1.62 \\, \\text{m/s}^2\\) ) versus Earth ( \\(g \\approx 9.81 \\, \\text{m/s}^2\\) ), the range increases significantly for the same \\(v_0\\) and \\(\\theta\\) . 3. Practical Applications Sports : In soccer or golf, players adjust \\(\\theta\\) and \\(v_0\\) to optimize range, though air resistance and spin complicate the ideal \\(45^\\circ\\) . Engineering : Artillery design considers terrain and drag, requiring adjusted angles. Astrophysics : Trajectories on other planets (different \\(g\\) ) or in space (negligible \\(g\\) ) adapt this model. For uneven terrain (launch height \\(h \\neq 0\\) ), the time of flight becomes the positive root of: $$ h + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 = 0 $$ This modifies the range, often reducing the optimal angle below \\(45^\\circ\\) . 4. Implementation Here\u2019s a Python script to simulate and visualize the range versus angle: import numpy as np import matplotlib.pyplot as plt def range_projectile(v0, theta_deg, g=9.81): theta = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta)) / g # Parameters v0_values = [10, 20, 30] # m/s g_values = [9.81, 1.62] # Earth, Moon theta = np.linspace(0, 90, 91) # 0 to 90 degrees # Plotting plt.figure(figsize=(10, 6)) for v0 in v0_values: for g in g_values: R = range_projectile(v0, theta, g) label = f'v0 = {v0} m/s, g = {g} m/s\u00b2' plt.plot(theta, R, label=label) plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() # Maximum range example v0 = 20 g = 9.81 theta_max = 45 R_max = range_projectile(v0, theta_max, g) print(f\"Max range at 45\u00b0 with v0 = {v0} m/s, g = {g} m/s\u00b2: {R_max:.2f} m\") \"Max range at 45\u00b0 with v0 = 20 m/s, g = 9.81 m/s\u00b2: 40.77 m\" Output Explanation The plot shows \\(R\\) versus \\(\\theta\\) for different \\(v_0\\) and \\(g\\) . Peaks at \\(45^\\circ\\) confirm the theoretical maximum. Higher \\(v_0\\) or lower \\(g\\) increases the range, as expected. Discussion and Limitations Idealized Model This model assumes: - No air resistance. - Flat terrain ( \\(h = 0\\) ). - Constant \\(g\\) . Real-World Adjustments Drag : Introduces a velocity-dependent force, reducing range and shifting the optimal angle (typically < \\(45^\\circ\\) ). Wind : Adds a horizontal force, altering the trajectory. Numerical Simulation : For drag, solve the differential equations numerically (e.g., using Runge-Kutta methods) since no closed-form solution exists. Suggestions Incorporate drag with \\(F_d = -k v\\) or terrain effects by adjusting the landing condition. Simulate these using Python libraries like scipy.integrate.odeint .","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is a classic application of Newton\u2019s laws in two dimensions. Let\u2019s derive the governing equations from first principles, assuming no air resistance for now (we\u2019ll revisit this later).","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deriving-the-equations-of-motion","text":"A projectile is launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) from the horizontal. The acceleration due to gravity \\(g\\) acts downward. We break the motion into horizontal (x) and vertical (y) components: Initial conditions: Horizontal velocity: \\(v_{x0} = v_0 \\cos\\theta\\) Vertical velocity: \\(v_{y0} = v_0 \\sin\\theta\\) Initial position: \\((x_0, y_0) = (0, 0)\\) (assuming launch from the origin) Acceleration: Horizontal: \\(a_x = 0\\) Vertical: \\(a_y = -g\\) Using the kinematic equations \\(v = v_0 + at\\) and \\(s = s_0 + v_0 t + \\frac{1}{2} a t^2\\) : Horizontal motion: $$ x(t) = v_{x0} t = v_0 \\cos\\theta \\cdot t $$ Vertical motion: $$ y(t) = v_{y0} t + \\frac{1}{2} a_y t^2 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$","title":"Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"The projectile hits the ground when \\(y(t) = 0\\) . Solve: $$ v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 = 0 $$ Factorize: $$ t \\left( v_0 \\sin\\theta - \\frac{1}{2} g t \\right) = 0 $$ Solutions: \\(t = 0\\) (launch) or: $$ t = \\frac{2 v_0 \\sin\\theta}{g} $$ This is the time of flight \\(T\\) .","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-equation","text":"The horizontal range \\(R\\) is the distance traveled when \\(t = T\\) : $$ R = x(T) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} $$ Using the identity \\(\\sin 2\\theta = 2 \\sin\\theta \\cos\\theta\\) : $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$","title":"Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"This equation reveals a family of solutions parameterized by: - \\(v_0\\) : Initial velocity scales the range quadratically. - \\(g\\) : Gravitational acceleration inversely affects the range. - \\(\\theta\\) : The angle determines the sinusoidal variation.","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-angle","text":"The term \\(\\sin 2\\theta\\) peaks at 1 when \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) , giving the maximum range: $$ R_{\\text{max}} = \\frac{v_0^2}{g} $$ - At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(\\sin 2\\theta = 0\\) , so \\(R = 0\\) . - The range is symmetric about \\(45^\\circ\\) (e.g., \\(\\theta = 30^\\circ\\) and \\(60^\\circ\\) yield the same range).","title":"Dependence on Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-parameters","text":"Initial Velocity ( \\(v_0\\) ) : Doubling \\(v_0\\) quadruples \\(R\\) , due to the \\(v_0^2\\) term. Gravity ( \\(g\\) ) : On the Moon ( \\(g \\approx 1.62 \\, \\text{m/s}^2\\) ) versus Earth ( \\(g \\approx 9.81 \\, \\text{m/s}^2\\) ), the range increases significantly for the same \\(v_0\\) and \\(\\theta\\) .","title":"Influence of Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports : In soccer or golf, players adjust \\(\\theta\\) and \\(v_0\\) to optimize range, though air resistance and spin complicate the ideal \\(45^\\circ\\) . Engineering : Artillery design considers terrain and drag, requiring adjusted angles. Astrophysics : Trajectories on other planets (different \\(g\\) ) or in space (negligible \\(g\\) ) adapt this model. For uneven terrain (launch height \\(h \\neq 0\\) ), the time of flight becomes the positive root of: $$ h + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 = 0 $$ This modifies the range, often reducing the optimal angle below \\(45^\\circ\\) .","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Here\u2019s a Python script to simulate and visualize the range versus angle: import numpy as np import matplotlib.pyplot as plt def range_projectile(v0, theta_deg, g=9.81): theta = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta)) / g # Parameters v0_values = [10, 20, 30] # m/s g_values = [9.81, 1.62] # Earth, Moon theta = np.linspace(0, 90, 91) # 0 to 90 degrees # Plotting plt.figure(figsize=(10, 6)) for v0 in v0_values: for g in g_values: R = range_projectile(v0, theta, g) label = f'v0 = {v0} m/s, g = {g} m/s\u00b2' plt.plot(theta, R, label=label) plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() # Maximum range example v0 = 20 g = 9.81 theta_max = 45 R_max = range_projectile(v0, theta_max, g) print(f\"Max range at 45\u00b0 with v0 = {v0} m/s, g = {g} m/s\u00b2: {R_max:.2f} m\") \"Max range at 45\u00b0 with v0 = 20 m/s, g = 9.81 m/s\u00b2: 40.77 m\"","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#output-explanation","text":"The plot shows \\(R\\) versus \\(\\theta\\) for different \\(v_0\\) and \\(g\\) . Peaks at \\(45^\\circ\\) confirm the theoretical maximum. Higher \\(v_0\\) or lower \\(g\\) increases the range, as expected.","title":"Output Explanation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#discussion-and-limitations","text":"","title":"Discussion and Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#idealized-model","text":"This model assumes: - No air resistance. - Flat terrain ( \\(h = 0\\) ). - Constant \\(g\\) .","title":"Idealized Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#real-world-adjustments","text":"Drag : Introduces a velocity-dependent force, reducing range and shifting the optimal angle (typically < \\(45^\\circ\\) ). Wind : Adds a horizontal force, altering the trajectory. Numerical Simulation : For drag, solve the differential equations numerically (e.g., using Runge-Kutta methods) since no closed-form solution exists.","title":"Real-World Adjustments"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#suggestions","text":"Incorporate drag with \\(F_d = -k v\\) or terrain effects by adjusting the landing condition. Simulate these using Python libraries like scipy.integrate.odeint .","title":"Suggestions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation The forced damped pendulum is governed by a second-order nonlinear differential equation that incorporates gravity (restoring force), damping, and an external periodic force. Let\u2019s derive it step-by-step. Governing Equation Consider a pendulum of length \\(l\\) and mass \\(m\\) , with angle \\(\\theta\\) from the vertical: Restoring force: Gravitational torque, \\(-\\frac{mg}{l} \\sin\\theta\\) . Damping: Proportional to angular velocity, \\(-b \\dot{\\theta}\\) (where \\(b\\) is the damping coefficient). External force: A periodic driving torque, \\(F_0 \\cos(\\omega t)\\) , where \\(F_0\\) is the amplitude and \\(\\omega\\) is the driving frequency. The equation of motion, from Newton\u2019s second law for rotation ( \\(I \\ddot{\\theta} = \\sum \\tau\\) ), is: $$ ml^2 \\ddot{\\theta} + b \\dot{\\theta} + mg \\sin\\theta = F_0 \\cos(\\omega t) $$ Divide through by \\(ml^2\\) and define: \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) (natural frequency), \\(\\gamma = \\frac{b}{ml^2}\\) (damping rate), \\(f = \\frac{F_0}{ml^2}\\) (driving amplitude per unit inertia). The standard form becomes: $$ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = f \\cos(\\omega t) $$ Small-Angle Approximation For small \\(\\theta\\) , \\(\\sin\\theta \\approx \\theta\\) , simplifying the equation to a linear forced damped oscillator: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = f \\cos(\\omega t) \\] This is solvable analytically: Homogeneous solution: \\(\\theta_h(t) = e^{-\\frac{\\gamma}{2} t} [A \\cos(\\omega_d t) + B \\sin(\\omega_d t)]\\) , where \\(\\omega_d = \\sqrt{\\omega_0^2 - (\\frac{\\gamma}{2})^2}\\) (damped frequency). Particular solution: \\(\\theta_p(t) = C \\cos(\\omega t - \\phi)\\) , with amplitude \\(C = \\frac{f}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}}\\) and phase \\(\\phi = \\tan^{-1}\\left(\\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2}\\right)\\) . Resonance Resonance occurs when \\(\\omega \\approx \\omega_0\\) , maximizing \\(C\\) . For light damping ( \\(\\gamma\\) small), the amplitude peaks sharply, amplifying the pendulum\u2019s response. 2. Analysis of Dynamics Parameter Effects Damping ( \\(\\gamma\\) ) : High \\(\\gamma\\) suppresses oscillations; low \\(\\gamma\\) allows sustained or chaotic motion. Driving Amplitude ( \\(f\\) ) : Small \\(f\\) yields regular oscillations; large \\(f\\) can push the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance occurs; far from \\(\\omega_0\\) , motion may become quasiperiodic or chaotic. Transition to Chaos The nonlinear term \\(\\sin\\theta\\) (absent in the small-angle case) introduces complexity: Periodic Motion: At low \\(f\\) , the pendulum locks to the driving frequency. Chaos: High \\(f\\) or specific \\(\\omega\\) values lead to unpredictable, aperiodic motion, sensitive to initial conditions. 3. Practical Applications Energy Harvesting: Oscillating systems (e.g., piezoelectric devices) convert motion to electricity, optimized near resonance. Suspension Bridges: External forces (wind) can drive oscillations, requiring damping to prevent collapse (e.g., Tacoma Narrows). Circuits: Driven RLC circuits mirror this behavior, used in signal processing. 4. Implementation Let\u2019s simulate this using Python with the Runge-Kutta method (RK4) for the nonlinear equation, visualizing motion, phase portraits, and Poincar\u00e9 sections. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def pendulum_deriv(state, t, gamma, omega0, f, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -gamma * theta_dot - omega0**2 * np.sin(theta) + f * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] # Parameters g = 9.81 # m/s^2 l = 1.0 # m omega0 = np.sqrt(g / l) gamma = 0.5 # damping coefficient f = 1.2 # driving amplitude omega = 2/3 * omega0 # driving frequency # Time array t = np.linspace(0, 50, 1000) # Initial conditions theta0 = 0.1 # radians theta_dot0 = 0.0 state0 = [theta0, theta_dot0] # Solve ODE sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) theta, theta_dot = sol[:, 0], sol[:, 1] # Plots plt.figure(figsize=(12, 8)) # Time series plt.subplot(2, 2, 1) plt.plot(t, theta, 'b') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.title('Pendulum Motion') # Phase portrait plt.subplot(2, 2, 2) plt.plot(theta, theta_dot, 'r') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Phase Portrait') # Poincar\u00e9 section (at t = 2\u03c0/\u03c9 multiples) poincare_t = t[::int(2 * np.pi / (omega * (t[1] - t[0])))] poincare_theta = [] poincare_theta_dot = [] for ti in poincare_t: idx = np.argmin(np.abs(t - ti)) poincare_theta.append(theta[idx]) poincare_theta_dot.append(theta_dot[idx]) plt.subplot(2, 2, 3) plt.scatter(poincare_theta, poincare_theta_dot, s=5, c='g') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Poincar\u00e9 Section') plt.tight_layout() plt.show() # Vary parameters for resonance and chaos f_values = [0.5, 1.2, 1.5] # Explore different amplitudes plt.figure(figsize=(12, 4)) for i, f in enumerate(f_values): sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) plt.subplot(1, 3, i+1) plt.plot(t, sol[:, 0]) plt.title(f'f = {f}') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.tight_layout() plt.show() Output Explanation Time Series: Shows \\(\\theta(t)\\) \u2014regular for small \\(f\\) , chaotic for large \\(f\\) . Phase Portrait: A closed loop indicates periodic motion; scattered points suggest chaos. Poincar\u00e9 Section: Discrete points for periodic motion; a cloud for chaos. Parameter Variation: Low \\(f\\) (0.5) gives damped oscillations, higher \\(f\\) (1.5) shows chaotic behavior. Deliverables Solutions: Linear case has damped + driven terms; nonlinear requires numerical methods. Graphics: Time series, phase portraits, and Poincar\u00e9 sections illustrate dynamics. Limitations: Assumes constant \\(\\gamma\\) , periodic forcing, and no friction irregularities. Extensions: Add nonlinear damping ( \\(\\gamma |\\dot{\\theta}| \\dot{\\theta}\\) ) or stochastic forcing. Discussion The forced damped pendulum bridges simple oscillators and complex systems. Resonance amplifies energy transfer, while chaos reveals sensitivity to conditions\u2014key for engineering and physics. For deeper analysis, bifurcation diagrams (varying \\(f\\) or \\(\\omega\\) ) could map transitions to chaos.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The forced damped pendulum is governed by a second-order nonlinear differential equation that incorporates gravity (restoring force), damping, and an external periodic force. Let\u2019s derive it step-by-step.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"Consider a pendulum of length \\(l\\) and mass \\(m\\) , with angle \\(\\theta\\) from the vertical: Restoring force: Gravitational torque, \\(-\\frac{mg}{l} \\sin\\theta\\) . Damping: Proportional to angular velocity, \\(-b \\dot{\\theta}\\) (where \\(b\\) is the damping coefficient). External force: A periodic driving torque, \\(F_0 \\cos(\\omega t)\\) , where \\(F_0\\) is the amplitude and \\(\\omega\\) is the driving frequency. The equation of motion, from Newton\u2019s second law for rotation ( \\(I \\ddot{\\theta} = \\sum \\tau\\) ), is: $$ ml^2 \\ddot{\\theta} + b \\dot{\\theta} + mg \\sin\\theta = F_0 \\cos(\\omega t) $$ Divide through by \\(ml^2\\) and define: \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) (natural frequency), \\(\\gamma = \\frac{b}{ml^2}\\) (damping rate), \\(f = \\frac{F_0}{ml^2}\\) (driving amplitude per unit inertia). The standard form becomes: $$ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = f \\cos(\\omega t) $$","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small \\(\\theta\\) , \\(\\sin\\theta \\approx \\theta\\) , simplifying the equation to a linear forced damped oscillator: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = f \\cos(\\omega t) \\] This is solvable analytically: Homogeneous solution: \\(\\theta_h(t) = e^{-\\frac{\\gamma}{2} t} [A \\cos(\\omega_d t) + B \\sin(\\omega_d t)]\\) , where \\(\\omega_d = \\sqrt{\\omega_0^2 - (\\frac{\\gamma}{2})^2}\\) (damped frequency). Particular solution: \\(\\theta_p(t) = C \\cos(\\omega t - \\phi)\\) , with amplitude \\(C = \\frac{f}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}}\\) and phase \\(\\phi = \\tan^{-1}\\left(\\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2}\\right)\\) .","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Resonance occurs when \\(\\omega \\approx \\omega_0\\) , maximizing \\(C\\) . For light damping ( \\(\\gamma\\) small), the amplitude peaks sharply, amplifying the pendulum\u2019s response.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-effects","text":"Damping ( \\(\\gamma\\) ) : High \\(\\gamma\\) suppresses oscillations; low \\(\\gamma\\) allows sustained or chaotic motion. Driving Amplitude ( \\(f\\) ) : Small \\(f\\) yields regular oscillations; large \\(f\\) can push the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance occurs; far from \\(\\omega_0\\) , motion may become quasiperiodic or chaotic.","title":"Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"The nonlinear term \\(\\sin\\theta\\) (absent in the small-angle case) introduces complexity: Periodic Motion: At low \\(f\\) , the pendulum locks to the driving frequency. Chaos: High \\(f\\) or specific \\(\\omega\\) values lead to unpredictable, aperiodic motion, sensitive to initial conditions.","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy Harvesting: Oscillating systems (e.g., piezoelectric devices) convert motion to electricity, optimized near resonance. Suspension Bridges: External forces (wind) can drive oscillations, requiring damping to prevent collapse (e.g., Tacoma Narrows). Circuits: Driven RLC circuits mirror this behavior, used in signal processing.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"Let\u2019s simulate this using Python with the Runge-Kutta method (RK4) for the nonlinear equation, visualizing motion, phase portraits, and Poincar\u00e9 sections. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def pendulum_deriv(state, t, gamma, omega0, f, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -gamma * theta_dot - omega0**2 * np.sin(theta) + f * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] # Parameters g = 9.81 # m/s^2 l = 1.0 # m omega0 = np.sqrt(g / l) gamma = 0.5 # damping coefficient f = 1.2 # driving amplitude omega = 2/3 * omega0 # driving frequency # Time array t = np.linspace(0, 50, 1000) # Initial conditions theta0 = 0.1 # radians theta_dot0 = 0.0 state0 = [theta0, theta_dot0] # Solve ODE sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) theta, theta_dot = sol[:, 0], sol[:, 1] # Plots plt.figure(figsize=(12, 8)) # Time series plt.subplot(2, 2, 1) plt.plot(t, theta, 'b') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.title('Pendulum Motion') # Phase portrait plt.subplot(2, 2, 2) plt.plot(theta, theta_dot, 'r') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Phase Portrait') # Poincar\u00e9 section (at t = 2\u03c0/\u03c9 multiples) poincare_t = t[::int(2 * np.pi / (omega * (t[1] - t[0])))] poincare_theta = [] poincare_theta_dot = [] for ti in poincare_t: idx = np.argmin(np.abs(t - ti)) poincare_theta.append(theta[idx]) poincare_theta_dot.append(theta_dot[idx]) plt.subplot(2, 2, 3) plt.scatter(poincare_theta, poincare_theta_dot, s=5, c='g') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Poincar\u00e9 Section') plt.tight_layout() plt.show() # Vary parameters for resonance and chaos f_values = [0.5, 1.2, 1.5] # Explore different amplitudes plt.figure(figsize=(12, 4)) for i, f in enumerate(f_values): sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) plt.subplot(1, 3, i+1) plt.plot(t, sol[:, 0]) plt.title(f'f = {f}') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.tight_layout() plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#output-explanation","text":"Time Series: Shows \\(\\theta(t)\\) \u2014regular for small \\(f\\) , chaotic for large \\(f\\) . Phase Portrait: A closed loop indicates periodic motion; scattered points suggest chaos. Poincar\u00e9 Section: Discrete points for periodic motion; a cloud for chaos. Parameter Variation: Low \\(f\\) (0.5) gives damped oscillations, higher \\(f\\) (1.5) shows chaotic behavior.","title":"Output Explanation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#deliverables","text":"Solutions: Linear case has damped + driven terms; nonlinear requires numerical methods. Graphics: Time series, phase portraits, and Poincar\u00e9 sections illustrate dynamics. Limitations: Assumes constant \\(\\gamma\\) , periodic forcing, and no friction irregularities. Extensions: Add nonlinear damping ( \\(\\gamma |\\dot{\\theta}| \\dot{\\theta}\\) ) or stochastic forcing.","title":"Deliverables"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#discussion","text":"The forced damped pendulum bridges simple oscillators and complex systems. Resonance amplifies energy transfer, while chaos reveals sensitivity to conditions\u2014key for engineering and physics. For deeper analysis, bifurcation diagrams (varying \\(f\\) or \\(\\omega\\) ) could map transitions to chaos.","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius 1. Theoretical Foundation Kepler\u2019s Third Law ( \\(T^2 \\propto r^3\\) ) is a gem of celestial mechanics. Let\u2019s derive it for circular orbits with clarity and precision, ensuring every step shines. Derivation of Kepler\u2019s Third Law Imagine a small body (mass \\(m\\) ) orbiting a massive central body (mass \\(M\\) ), like a planet around the Sun or the Moon around Earth. The orbit is circular with radius \\(r\\) . We\u2019ll use Newton\u2019s laws and gravity to connect the orbital period \\(T\\) to the radius \\(r\\) . Step 1: Forces at Play The gravitational pull keeps the body in its circular path: - Gravitational force: The attraction between \\(m\\) and \\(M\\) is given by Newton\u2019s law of gravitation: $$ F_g = \\frac{G M m}{r^2} $$ where \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ). Centripetal force: For circular motion, a force is needed to keep \\(m\\) moving at speed \\(v\\) along the curve: $$ F_c = \\frac{m v^2}{r} $$ Since gravity provides this centripetal force, we equate them: $$ \\frac{G M m}{r^2} = \\frac{m v^2}{r} $$ Step 2: Simplify the Equation Notice \\(m\\) (the orbiting body\u2019s mass) appears on both sides. As long as \\(m \\neq 0\\) , we can cancel it: $$ \\frac{G M}{r^2} = \\frac{v^2}{r} $$ Now, multiply both sides by \\(r\\) to clear the denominator on the right: $$ \\frac{G M}{r^2} \\cdot r = \\frac{v^2}{r} \\cdot r $$ This simplifies to: $$ \\frac{G M}{r} = v^2 $$ So, the orbital velocity squared depends on the central mass and radius: $$ v^2 = \\frac{G M}{r} $$ Step 3: Link Velocity to Period In a circular orbit, the body travels the circumference ( \\(2\\pi r\\) ) in one period ( \\(T\\) ). Thus, the orbital speed is: $$ v = \\frac{\\text{Circumference}}{\\text{Time}} = \\frac{2\\pi r}{T} $$ Square this expression: $$ v^2 = \\left(\\frac{2\\pi r}{T}\\right)^2 = \\frac{4\\pi^2 r^2}{T^2} $$ Step 4: Combine and Solve Substitute \\(v^2 = \\frac{4\\pi^2 r^2}{T^2}\\) into our force equation: $$ \\frac{4\\pi^2 r^2}{T^2} = \\frac{G M}{r} $$ To isolate \\(T^2\\) , multiply both sides by \\(T^2\\) : $$ 4\\pi^2 r^2 = \\frac{G M}{r} \\cdot T^2 $$ Now, divide both sides by \\(\\frac{G M}{r}\\) (or multiply by its reciprocal): $$ T^2 = \\frac{4\\pi^2 r^2}{\\frac{G M}{r}} = \\frac{4\\pi^2 r^2 \\cdot r}{G M} $$ Simplify the exponents: $$ T^2 = \\frac{4\\pi^2 r^3}{G M} $$ Define the constant \\(k = \\frac{4\\pi^2}{G M}\\) , giving us the final form: $$ T^2 = k r^3 $$ Conclusion This elegant result shows \\(T^2\\) is directly proportional to \\(r^3\\) , with \\(k\\) depending only on \\(G\\) and \\(M\\) . It\u2019s universal for circular orbits around the same central mass! 2. Implications for Astronomy Mass Calculation: Measure \\(r\\) and \\(T\\) , then solve for \\(M\\) : $$ M = \\frac{4\\pi^2 r^3}{G T^2} $$ Perfect for finding the mass of stars or planets using their moons or satellites. Distance Estimation: If \\(M\\) is known (e.g., the Sun\u2019s mass), calculate \\(r\\) from \\(T\\) . Scalability: Applies to Solar System planets, exoplanets, and artificial satellites. 3. Real-World Examples Moon\u2019s Orbit: \\(r = 384,400 \\, \\text{km} = 3.844 \\times 10^8 \\, \\text{m}\\) \\(T = 27.32 \\, \\text{days} = 2.36 \\times 10^6 \\, \\text{s}\\) Plug in: \\(M_{\\text{Earth}} = \\frac{4\\pi^2 (3.844 \\times 10^8)^3}{(6.67430 \\times 10^{-11}) (2.36 \\times 10^6)^2} \\approx 5.97 \\times 10^{24} \\, \\text{kg}\\) . Earth\u2019s Orbit: \\(r = 1 \\, \\text{AU} = 1.496 \\times 10^{11} \\, \\text{m}\\) \\(T = 365.25 \\, \\text{days} = 3.156 \\times 10^7 \\, \\text{s}\\) Confirms the law with \\(M_{\\text{Sun}} \\approx 1.989 \\times 10^{30} \\, \\text{kg}\\) . 4. Implementation import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 M_sun = 1.989e30 # kg M_earth = 5.972e24 # kg # Orbital period (in days) def orbital_period(r, M): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) / (24 * 3600) # Data r_values = np.logspace(7, 11, 100) # m T_sun = orbital_period(r_values, M_sun) T_earth = orbital_period(r_values, M_earth) # T^2 vs r^3 Plot plt.figure(figsize=(10, 6)) plt.loglog(r_values**3, T_sun**2, 'b-', label='Around Sun') plt.loglog(r_values**3, T_earth**2, 'r-', label='Around Earth') plt.xlabel(r'$r^3$ (m$^3$)') plt.ylabel(r'$T^2$ (days$^2$)') plt.title('Kepler\u2019s Third Law') plt.legend() plt.grid(True, ls='--') plt.show() # Circular Orbit theta = np.linspace(0, 2 * np.pi, 100) r_moon = 3.844e8 # m x, y = r_moon * np.cos(theta), r_moon * np.sin(theta) plt.figure(figsize=(6, 6)) plt.plot(x, y, 'b-', label='Moon\u2019s Orbit') plt.plot(0, 0, 'ro', label='Earth') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Moon\u2019s Circular Orbit') plt.legend() plt.axis('equal') plt.grid(True) plt.show() # Verification T_moon = orbital_period(r_moon, M_earth) print(f\"Calculated Moon period: {T_moon:.2f} days (Actual: 27.32)\") \"Calculated Moon period: 27.45 days (Actual: 27.32)\" Outputs Graph: Log-log plot shows a perfect line, proving \\(T^2 \\propto r^3\\) . Orbit: Visualizes the Moon\u2019s path. Check: Calculated \\(T\\) matches reality. Discussion Elliptical Orbits: Use semi-major axis \\(a\\) : \\(T^2 = \\frac{4\\pi^2}{G M} a^3\\) . Limits: Assumes \\(m \\ll M\\) and no perturbations.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-foundation","text":"Kepler\u2019s Third Law ( \\(T^2 \\propto r^3\\) ) is a gem of celestial mechanics. Let\u2019s derive it for circular orbits with clarity and precision, ensuring every step shines.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-keplers-third-law","text":"Imagine a small body (mass \\(m\\) ) orbiting a massive central body (mass \\(M\\) ), like a planet around the Sun or the Moon around Earth. The orbit is circular with radius \\(r\\) . We\u2019ll use Newton\u2019s laws and gravity to connect the orbital period \\(T\\) to the radius \\(r\\) .","title":"Derivation of Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-1-forces-at-play","text":"The gravitational pull keeps the body in its circular path: - Gravitational force: The attraction between \\(m\\) and \\(M\\) is given by Newton\u2019s law of gravitation: $$ F_g = \\frac{G M m}{r^2} $$ where \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ). Centripetal force: For circular motion, a force is needed to keep \\(m\\) moving at speed \\(v\\) along the curve: $$ F_c = \\frac{m v^2}{r} $$ Since gravity provides this centripetal force, we equate them: $$ \\frac{G M m}{r^2} = \\frac{m v^2}{r} $$","title":"Step 1: Forces at Play"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-2-simplify-the-equation","text":"Notice \\(m\\) (the orbiting body\u2019s mass) appears on both sides. As long as \\(m \\neq 0\\) , we can cancel it: $$ \\frac{G M}{r^2} = \\frac{v^2}{r} $$ Now, multiply both sides by \\(r\\) to clear the denominator on the right: $$ \\frac{G M}{r^2} \\cdot r = \\frac{v^2}{r} \\cdot r $$ This simplifies to: $$ \\frac{G M}{r} = v^2 $$ So, the orbital velocity squared depends on the central mass and radius: $$ v^2 = \\frac{G M}{r} $$","title":"Step 2: Simplify the Equation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-3-link-velocity-to-period","text":"In a circular orbit, the body travels the circumference ( \\(2\\pi r\\) ) in one period ( \\(T\\) ). Thus, the orbital speed is: $$ v = \\frac{\\text{Circumference}}{\\text{Time}} = \\frac{2\\pi r}{T} $$ Square this expression: $$ v^2 = \\left(\\frac{2\\pi r}{T}\\right)^2 = \\frac{4\\pi^2 r^2}{T^2} $$","title":"Step 3: Link Velocity to Period"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-4-combine-and-solve","text":"Substitute \\(v^2 = \\frac{4\\pi^2 r^2}{T^2}\\) into our force equation: $$ \\frac{4\\pi^2 r^2}{T^2} = \\frac{G M}{r} $$ To isolate \\(T^2\\) , multiply both sides by \\(T^2\\) : $$ 4\\pi^2 r^2 = \\frac{G M}{r} \\cdot T^2 $$ Now, divide both sides by \\(\\frac{G M}{r}\\) (or multiply by its reciprocal): $$ T^2 = \\frac{4\\pi^2 r^2}{\\frac{G M}{r}} = \\frac{4\\pi^2 r^2 \\cdot r}{G M} $$ Simplify the exponents: $$ T^2 = \\frac{4\\pi^2 r^3}{G M} $$ Define the constant \\(k = \\frac{4\\pi^2}{G M}\\) , giving us the final form: $$ T^2 = k r^3 $$","title":"Step 4: Combine and Solve"},{"location":"1%20Physics/2%20Gravity/Problem_1/#conclusion","text":"This elegant result shows \\(T^2\\) is directly proportional to \\(r^3\\) , with \\(k\\) depending only on \\(G\\) and \\(M\\) . It\u2019s universal for circular orbits around the same central mass!","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-implications-for-astronomy","text":"Mass Calculation: Measure \\(r\\) and \\(T\\) , then solve for \\(M\\) : $$ M = \\frac{4\\pi^2 r^3}{G T^2} $$ Perfect for finding the mass of stars or planets using their moons or satellites. Distance Estimation: If \\(M\\) is known (e.g., the Sun\u2019s mass), calculate \\(r\\) from \\(T\\) . Scalability: Applies to Solar System planets, exoplanets, and artificial satellites.","title":"2. Implications for Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-real-world-examples","text":"Moon\u2019s Orbit: \\(r = 384,400 \\, \\text{km} = 3.844 \\times 10^8 \\, \\text{m}\\) \\(T = 27.32 \\, \\text{days} = 2.36 \\times 10^6 \\, \\text{s}\\) Plug in: \\(M_{\\text{Earth}} = \\frac{4\\pi^2 (3.844 \\times 10^8)^3}{(6.67430 \\times 10^{-11}) (2.36 \\times 10^6)^2} \\approx 5.97 \\times 10^{24} \\, \\text{kg}\\) . Earth\u2019s Orbit: \\(r = 1 \\, \\text{AU} = 1.496 \\times 10^{11} \\, \\text{m}\\) \\(T = 365.25 \\, \\text{days} = 3.156 \\times 10^7 \\, \\text{s}\\) Confirms the law with \\(M_{\\text{Sun}} \\approx 1.989 \\times 10^{30} \\, \\text{kg}\\) .","title":"3. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-implementation","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 M_sun = 1.989e30 # kg M_earth = 5.972e24 # kg # Orbital period (in days) def orbital_period(r, M): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) / (24 * 3600) # Data r_values = np.logspace(7, 11, 100) # m T_sun = orbital_period(r_values, M_sun) T_earth = orbital_period(r_values, M_earth) # T^2 vs r^3 Plot plt.figure(figsize=(10, 6)) plt.loglog(r_values**3, T_sun**2, 'b-', label='Around Sun') plt.loglog(r_values**3, T_earth**2, 'r-', label='Around Earth') plt.xlabel(r'$r^3$ (m$^3$)') plt.ylabel(r'$T^2$ (days$^2$)') plt.title('Kepler\u2019s Third Law') plt.legend() plt.grid(True, ls='--') plt.show() # Circular Orbit theta = np.linspace(0, 2 * np.pi, 100) r_moon = 3.844e8 # m x, y = r_moon * np.cos(theta), r_moon * np.sin(theta) plt.figure(figsize=(6, 6)) plt.plot(x, y, 'b-', label='Moon\u2019s Orbit') plt.plot(0, 0, 'ro', label='Earth') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Moon\u2019s Circular Orbit') plt.legend() plt.axis('equal') plt.grid(True) plt.show() # Verification T_moon = orbital_period(r_moon, M_earth) print(f\"Calculated Moon period: {T_moon:.2f} days (Actual: 27.32)\") \"Calculated Moon period: 27.45 days (Actual: 27.32)\"","title":"4. Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#outputs","text":"Graph: Log-log plot shows a perfect line, proving \\(T^2 \\propto r^3\\) . Orbit: Visualizes the Moon\u2019s path. Check: Calculated \\(T\\) matches reality.","title":"Outputs"},{"location":"1%20Physics/2%20Gravity/Problem_1/#discussion","text":"Elliptical Orbits: Use semi-major axis \\(a\\) : \\(T^2 = \\frac{4\\pi^2}{G M} a^3\\) . Limits: Assumes \\(m \\ll M\\) and no perturbations.","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Escape Velocities and Cosmic Velocities 1. Theoretical Foundation Escape velocity and cosmic velocities are key to breaking free from gravitational bonds. Let\u2019s define and derive them with precision. Definitions Escape Velocity ( \\(v_e\\) ): The minimum speed needed to escape a celestial body\u2019s gravitational pull, reaching infinity with zero kinetic energy left. First Cosmic Velocity ( \\(v_1\\) ): The speed for a circular orbit just above a body\u2019s surface\u2014essentially the orbital velocity. Second Cosmic Velocity ( \\(v_2\\) ): Identical to escape velocity; the speed to escape the body entirely from its surface. Third Cosmic Velocity ( \\(v_3\\) ): The speed to escape a star system (e.g., the Solar System) from a planet\u2019s orbit around the star. Derivations Escape Velocity ( \\(v_e\\) ) To escape a body of mass \\(M\\) and radius \\(R\\) , the total mechanical energy at launch must be zero at infinity (potential energy = 0, kinetic energy = 0): - Initial energy: Kinetic + Potential $$ E = \\frac{1}{2} m v_e^2 - \\frac{G M m}{R} $$ - At infinity: \\(E = 0\\) $$ \\frac{1}{2} m v_e^2 - \\frac{G M m}{R} = 0 $$ - Cancel \\(m\\) and solve: $$ \\frac{1}{2} v_e^2 = \\frac{G M}{R} \\quad \\Rightarrow \\quad v_e^2 = \\frac{2 G M}{R} \\quad \\Rightarrow \\quad v_e = \\sqrt{\\frac{2 G M}{R}} $$ First Cosmic Velocity ( \\(v_1\\) ) For a circular orbit at radius \\(r \\approx R\\) , gravity provides the centripetal force: - Force balance: $$ \\frac{G M m}{R^2} = \\frac{m v_1^2}{R} $$ - Simplify: $$ v_1^2 = \\frac{G M}{R} \\quad \\Rightarrow \\quad v_1 = \\sqrt{\\frac{G M}{R}} $$ - Note: \\(v_1 = \\frac{v_e}{\\sqrt{2}}\\) , a handy relation. Second Cosmic Velocity ( \\(v_2\\) ) This is simply the escape velocity from the surface: $$ v_2 = v_e = \\sqrt{\\frac{2 G M}{R}} $$ Third Cosmic Velocity ( \\(v_3\\) ) The speed to escape the Sun\u2019s gravity from Earth\u2019s orbit (distance \\(r_{\\text{orbit}} = 1 \\, \\text{AU}\\) ), starting at Earth\u2019s surface: - Total energy to escape Sun: From Earth\u2019s orbit, escape velocity from the Sun is: $$ v_{\\text{esc,Sun}} = \\sqrt{\\frac{2 G M_{\\text{Sun}}}{r_{\\text{orbit}}}} $$ - Earth\u2019s orbital speed around Sun: \\(v_{\\text{orbit}} = \\sqrt{\\frac{G M_{\\text{Sun}}}{r_{\\text{orbit}}}}\\) - Excess speed needed: \\(v_3\\) is the speed relative to Earth to achieve \\(v_{\\text{esc,Sun}}\\) : $$ v_3 = v_{\\text{esc,Sun}} - v_{\\text{orbit}} = \\sqrt{\\frac{2 G M_{\\text{Sun}}}{r_{\\text{orbit}}}} - \\sqrt{\\frac{G M_{\\text{Sun}}}{r_{\\text{orbit}}}} $$ - For Earth: \\(r_{\\text{orbit}} = 1.496 \\times 10^{11} \\, \\text{m}\\) , \\(M_{\\text{Sun}} = 1.989 \\times 10^{30} \\, \\text{kg}\\) . 2. Parameters Affecting Velocities Mass ( \\(M\\) ): Larger \\(M\\) increases all velocities. Radius ( \\(R\\) ): Larger \\(R\\) decreases \\(v_e\\) and \\(v_1\\) . Distance ( \\(r_{\\text{orbit}}\\) ): For \\(v_3\\) , the orbital radius from the star matters. 3. Calculations for Celestial Bodies Using \\(G = 6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) : - Earth: \\(M = 5.972 \\times 10^{24} \\, \\text{kg}\\) , \\(R = 6.371 \\times 10^6 \\, \\text{m}\\) - \\(v_1 = \\sqrt{\\frac{G M}{R}} \\approx 7.91 \\, \\text{km/s}\\) - \\(v_2 = \\sqrt{\\frac{2 G M}{R}} \\approx 11.19 \\, \\text{km/s}\\) - \\(v_3 \\approx 42.1 - 29.8 = 12.3 \\, \\text{km/s}\\) (from Sun\u2019s influence). Mars: \\(M = 6.417 \\times 10^{23} \\, \\text{kg}\\) , \\(R = 3.39 \\times 10^6 \\, \\text{m}\\) \\(v_1 \\approx 3.55 \\, \\text{km/s}\\) \\(v_2 \\approx 5.03 \\, \\text{km/s}\\) Jupiter: \\(M = 1.899 \\times 10^{27} \\, \\text{kg}\\) , \\(R = 6.991 \\times 10^7 \\, \\text{m}\\) \\(v_1 \\approx 42.1 \\, \\text{km/s}\\) \\(v_2 \\approx 59.5 \\, \\text{km/s}\\) 4. Importance in Space Exploration Satellites: \\(v_1\\) for low orbits (e.g., ISS at 7.66 km/s). Planetary Missions: \\(v_2\\) to leave Earth; \\(v_3\\) for solar escape (e.g., Voyager). Interstellar Travel: Exceeding \\(v_3\\) opens the galaxy. 5. Implementation import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 M_sun = 1.989e30 AU = 1.496e11 # Celestial body data: [Mass (kg), Radius (m)] bodies = { 'Earth': [5.972e24, 6.371e6], 'Mars': [6.417e23, 3.39e6], 'Jupiter': [1.899e27, 6.991e7] } # Velocity functions def v1(M, R): return np.sqrt(G * M / R) / 1000 # km/s def v2(M, R): return np.sqrt(2 * G * M / R) / 1000 # km/s def v3(M_star, r_orbit, v_planet): v_esc_sun = np.sqrt(2 * G * M_star / r_orbit) / 1000 v_orbit = np.sqrt(G * M_star / r_orbit) / 1000 return v_esc_sun - v_orbit # Calculate velocities velocities = {} for body, (M, R) in bodies.items(): velocities[body] = [v1(M, R), v2(M, R)] # Add v3 for Earth velocities['Earth'].append(v3(M_sun, AU, v1(*bodies['Earth']))) # Plotting labels = ['Earth', 'Mars', 'Jupiter'] v1_vals = [velocities[b][0] for b in labels] v2_vals = [velocities[b][1] for b in labels] v3_vals = [velocities['Earth'][2], 0, 0] # v3 only for Earth x = np.arange(len(labels)) width = 0.25 plt.figure(figsize=(10, 6)) plt.bar(x - width, v1_vals, width, label='$v_1$ (Orbital)', color='skyblue') plt.bar(x, v2_vals, width, label='$v_2$ (Escape)', color='salmon') plt.bar(x + width, v3_vals, width, label='$v_3$ (Solar Escape)', color='lightgreen') plt.xlabel('Celestial Bodies') plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities') plt.xticks(x, labels) plt.legend() plt.grid(True, ls='--', alpha=0.7) plt.show() # Print results for body in bodies: print(f\"{body}: v1 = {velocities[body][0]:.2f} km/s, v2 = {velocities[body][1]:.2f} km/s\") print(f\"Earth v3 = {velocities['Earth'][2]:.2f} km/s\") \"Earth: v1 = 7.91 km/s, v2 = 11.19 km/s Mars: v1 = 3.55 km/s, v2 = 5.03 km/s Jupiter: v1 = 42.58 km/s, v2 = 60.22 km/s Earth v3 = 12.34 km/s\" Outputs Bar Chart: Compares \\(v_1\\) , \\(v_2\\) , and \\(v_3\\) across bodies. Values: Earth: \\(v_1 = 7.91\\) , \\(v_2 = 11.19\\) , \\(v_3 = 12.3 \\, \\text{km/s}\\) Mars: \\(v_1 = 3.55\\) , \\(v_2 = 5.03 \\, \\text{km/s}\\) Jupiter: \\(v_1 = 42.1\\) , \\(v_2 = 59.5 \\, \\text{km/s}\\) Discussion These velocities shape space missions: - \\(v_1\\) for stable orbits. - \\(v_2\\) for planetary escape. - \\(v_3\\) for solar system departure. Limitations include neglecting atmospheric drag or multi-body effects, but the core principles hold firm.","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-theoretical-foundation","text":"Escape velocity and cosmic velocities are key to breaking free from gravitational bonds. Let\u2019s define and derive them with precision.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#definitions","text":"Escape Velocity ( \\(v_e\\) ): The minimum speed needed to escape a celestial body\u2019s gravitational pull, reaching infinity with zero kinetic energy left. First Cosmic Velocity ( \\(v_1\\) ): The speed for a circular orbit just above a body\u2019s surface\u2014essentially the orbital velocity. Second Cosmic Velocity ( \\(v_2\\) ): Identical to escape velocity; the speed to escape the body entirely from its surface. Third Cosmic Velocity ( \\(v_3\\) ): The speed to escape a star system (e.g., the Solar System) from a planet\u2019s orbit around the star.","title":"Definitions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#derivations","text":"","title":"Derivations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocity-v_e","text":"To escape a body of mass \\(M\\) and radius \\(R\\) , the total mechanical energy at launch must be zero at infinity (potential energy = 0, kinetic energy = 0): - Initial energy: Kinetic + Potential $$ E = \\frac{1}{2} m v_e^2 - \\frac{G M m}{R} $$ - At infinity: \\(E = 0\\) $$ \\frac{1}{2} m v_e^2 - \\frac{G M m}{R} = 0 $$ - Cancel \\(m\\) and solve: $$ \\frac{1}{2} v_e^2 = \\frac{G M}{R} \\quad \\Rightarrow \\quad v_e^2 = \\frac{2 G M}{R} \\quad \\Rightarrow \\quad v_e = \\sqrt{\\frac{2 G M}{R}} $$","title":"Escape Velocity (\\(v_e\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#first-cosmic-velocity-v_1","text":"For a circular orbit at radius \\(r \\approx R\\) , gravity provides the centripetal force: - Force balance: $$ \\frac{G M m}{R^2} = \\frac{m v_1^2}{R} $$ - Simplify: $$ v_1^2 = \\frac{G M}{R} \\quad \\Rightarrow \\quad v_1 = \\sqrt{\\frac{G M}{R}} $$ - Note: \\(v_1 = \\frac{v_e}{\\sqrt{2}}\\) , a handy relation.","title":"First Cosmic Velocity (\\(v_1\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#second-cosmic-velocity-v_2","text":"This is simply the escape velocity from the surface: $$ v_2 = v_e = \\sqrt{\\frac{2 G M}{R}} $$","title":"Second Cosmic Velocity (\\(v_2\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity-v_3","text":"The speed to escape the Sun\u2019s gravity from Earth\u2019s orbit (distance \\(r_{\\text{orbit}} = 1 \\, \\text{AU}\\) ), starting at Earth\u2019s surface: - Total energy to escape Sun: From Earth\u2019s orbit, escape velocity from the Sun is: $$ v_{\\text{esc,Sun}} = \\sqrt{\\frac{2 G M_{\\text{Sun}}}{r_{\\text{orbit}}}} $$ - Earth\u2019s orbital speed around Sun: \\(v_{\\text{orbit}} = \\sqrt{\\frac{G M_{\\text{Sun}}}{r_{\\text{orbit}}}}\\) - Excess speed needed: \\(v_3\\) is the speed relative to Earth to achieve \\(v_{\\text{esc,Sun}}\\) : $$ v_3 = v_{\\text{esc,Sun}} - v_{\\text{orbit}} = \\sqrt{\\frac{2 G M_{\\text{Sun}}}{r_{\\text{orbit}}}} - \\sqrt{\\frac{G M_{\\text{Sun}}}{r_{\\text{orbit}}}} $$ - For Earth: \\(r_{\\text{orbit}} = 1.496 \\times 10^{11} \\, \\text{m}\\) , \\(M_{\\text{Sun}} = 1.989 \\times 10^{30} \\, \\text{kg}\\) .","title":"Third Cosmic Velocity (\\(v_3\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-parameters-affecting-velocities","text":"Mass ( \\(M\\) ): Larger \\(M\\) increases all velocities. Radius ( \\(R\\) ): Larger \\(R\\) decreases \\(v_e\\) and \\(v_1\\) . Distance ( \\(r_{\\text{orbit}}\\) ): For \\(v_3\\) , the orbital radius from the star matters.","title":"2. Parameters Affecting Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-calculations-for-celestial-bodies","text":"Using \\(G = 6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) : - Earth: \\(M = 5.972 \\times 10^{24} \\, \\text{kg}\\) , \\(R = 6.371 \\times 10^6 \\, \\text{m}\\) - \\(v_1 = \\sqrt{\\frac{G M}{R}} \\approx 7.91 \\, \\text{km/s}\\) - \\(v_2 = \\sqrt{\\frac{2 G M}{R}} \\approx 11.19 \\, \\text{km/s}\\) - \\(v_3 \\approx 42.1 - 29.8 = 12.3 \\, \\text{km/s}\\) (from Sun\u2019s influence). Mars: \\(M = 6.417 \\times 10^{23} \\, \\text{kg}\\) , \\(R = 3.39 \\times 10^6 \\, \\text{m}\\) \\(v_1 \\approx 3.55 \\, \\text{km/s}\\) \\(v_2 \\approx 5.03 \\, \\text{km/s}\\) Jupiter: \\(M = 1.899 \\times 10^{27} \\, \\text{kg}\\) , \\(R = 6.991 \\times 10^7 \\, \\text{m}\\) \\(v_1 \\approx 42.1 \\, \\text{km/s}\\) \\(v_2 \\approx 59.5 \\, \\text{km/s}\\)","title":"3. Calculations for Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#4-importance-in-space-exploration","text":"Satellites: \\(v_1\\) for low orbits (e.g., ISS at 7.66 km/s). Planetary Missions: \\(v_2\\) to leave Earth; \\(v_3\\) for solar escape (e.g., Voyager). Interstellar Travel: Exceeding \\(v_3\\) opens the galaxy.","title":"4. Importance in Space Exploration"},{"location":"1%20Physics/2%20Gravity/Problem_2/#5-implementation","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 M_sun = 1.989e30 AU = 1.496e11 # Celestial body data: [Mass (kg), Radius (m)] bodies = { 'Earth': [5.972e24, 6.371e6], 'Mars': [6.417e23, 3.39e6], 'Jupiter': [1.899e27, 6.991e7] } # Velocity functions def v1(M, R): return np.sqrt(G * M / R) / 1000 # km/s def v2(M, R): return np.sqrt(2 * G * M / R) / 1000 # km/s def v3(M_star, r_orbit, v_planet): v_esc_sun = np.sqrt(2 * G * M_star / r_orbit) / 1000 v_orbit = np.sqrt(G * M_star / r_orbit) / 1000 return v_esc_sun - v_orbit # Calculate velocities velocities = {} for body, (M, R) in bodies.items(): velocities[body] = [v1(M, R), v2(M, R)] # Add v3 for Earth velocities['Earth'].append(v3(M_sun, AU, v1(*bodies['Earth']))) # Plotting labels = ['Earth', 'Mars', 'Jupiter'] v1_vals = [velocities[b][0] for b in labels] v2_vals = [velocities[b][1] for b in labels] v3_vals = [velocities['Earth'][2], 0, 0] # v3 only for Earth x = np.arange(len(labels)) width = 0.25 plt.figure(figsize=(10, 6)) plt.bar(x - width, v1_vals, width, label='$v_1$ (Orbital)', color='skyblue') plt.bar(x, v2_vals, width, label='$v_2$ (Escape)', color='salmon') plt.bar(x + width, v3_vals, width, label='$v_3$ (Solar Escape)', color='lightgreen') plt.xlabel('Celestial Bodies') plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities') plt.xticks(x, labels) plt.legend() plt.grid(True, ls='--', alpha=0.7) plt.show() # Print results for body in bodies: print(f\"{body}: v1 = {velocities[body][0]:.2f} km/s, v2 = {velocities[body][1]:.2f} km/s\") print(f\"Earth v3 = {velocities['Earth'][2]:.2f} km/s\") \"Earth: v1 = 7.91 km/s, v2 = 11.19 km/s Mars: v1 = 3.55 km/s, v2 = 5.03 km/s Jupiter: v1 = 42.58 km/s, v2 = 60.22 km/s Earth v3 = 12.34 km/s\"","title":"5. Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#outputs","text":"Bar Chart: Compares \\(v_1\\) , \\(v_2\\) , and \\(v_3\\) across bodies. Values: Earth: \\(v_1 = 7.91\\) , \\(v_2 = 11.19\\) , \\(v_3 = 12.3 \\, \\text{km/s}\\) Mars: \\(v_1 = 3.55\\) , \\(v_2 = 5.03 \\, \\text{km/s}\\) Jupiter: \\(v_1 = 42.1\\) , \\(v_2 = 59.5 \\, \\text{km/s}\\)","title":"Outputs"},{"location":"1%20Physics/2%20Gravity/Problem_2/#discussion","text":"These velocities shape space missions: - \\(v_1\\) for stable orbits. - \\(v_2\\) for planetary escape. - \\(v_3\\) for solar system departure. Limitations include neglecting atmospheric drag or multi-body effects, but the core principles hold firm.","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 Trajectories of a Freely Released Payload Near Earth 1. Theoretical Foundation When a payload is released from a moving rocket near Earth, its trajectory depends on its initial position, velocity, and Earth\u2019s gravitational pull. Let\u2019s explore the possible paths and derive the governing equations. Possible Trajectories The trajectory is determined by the payload\u2019s specific mechanical energy ( \\(\\epsilon\\) ), which combines kinetic and potential energy per unit mass: $$ \\epsilon = \\frac{v^2}{2} - \\frac{G M}{r} $$ - Elliptical Orbit ( \\(\\epsilon < 0\\) ): The payload stays bound, orbiting Earth (e.g., circular if eccentricity \\(e = 0\\) ). Parabolic Trajectory ( \\(\\epsilon = 0\\) ): The payload escapes to infinity with zero velocity at infinity (escape velocity). Hyperbolic Trajectory ( \\(\\epsilon > 0\\) ): The payload escapes with excess speed, following an open path. Governing Equations Under Newton\u2019s Law of Gravitation, the acceleration is: $$ \\mathbf{a} = -\\frac{G M}{r^3} \\mathbf{r} $$ Where: - \\(G = 6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) - \\(M = 5.972 \\times 10^{24} \\, \\text{kg}\\) (Earth\u2019s mass) - \\(\\mathbf{r} = (x, y)\\) is the position vector, \\(r = |\\mathbf{r}|\\) . In 2D Cartesian coordinates, the equations of motion are: $$ \\ddot{x} = -\\frac{G M x}{r^3}, \\quad \\ddot{y} = -\\frac{G M y}{r^3} $$ 2. Numerical Analysis Analytically solving these nonlinear equations is complex, so we\u2019ll use numerical methods (e.g., Runge-Kutta) to compute the trajectory based on initial conditions: position \\(\\mathbf{r}_0\\) , velocity \\(\\mathbf{v}_0\\) , and altitude. Initial Conditions Example Rocket at altitude 400 km: \\(r_0 = R_E + 400 \\, \\text{km} = 6.371 \\times 10^6 + 4 \\times 10^5 = 6.771 \\times 10^6 \\, \\text{m}\\) . Tangential velocity: \\(v_0 = 7.5 \\, \\text{km/s}\\) (near orbital speed). Release scenarios: Vary direction or magnitude of \\(\\mathbf{v}_0\\) . 3. Trajectory Types and Scenarios Elliptical (Suborbital): If \\(v_0 < v_{\\text{esc}} = \\sqrt{\\frac{2 G M}{r_0}} \\approx 11 \\, \\text{km/s}\\) , the payload orbits or falls back (reentry). Parabolic (Escape): If \\(v_0 = v_{\\text{esc}}\\) , it escapes to infinity. Hyperbolic (Excess): If \\(v_0 > v_{\\text{esc}}\\) , it escapes with leftover speed. Applications Orbital Insertion: Release with \\(v_0 \\approx \\sqrt{\\frac{G M}{r_0}} \\approx 7.8 \\, \\text{km/s}\\) for a circular orbit. Reentry: Low \\(v_0\\) leads to a suborbital arc, intersecting Earth. Escape: High \\(v_0\\) sends the payload beyond Earth\u2019s influence. 4. Implementation Here\u2019s a Python script using scipy.integrate.odeint to simulate and visualize trajectories: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Constants G = 6.67430e-11 M = 5.972e24 # Earth mass (kg) R_E = 6.371e6 # Earth radius (m) mu = G * M # Equations of motion def motion(state, t): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -mu * x / r**3 ay = -mu * y / r**3 return [vx, vy, ax, ay] # Initial conditions r0 = R_E + 4e5 # 400 km altitude v_esc = np.sqrt(2 * mu / r0) # Escape velocity v_circ = np.sqrt(mu / r0) # Circular orbit velocity # Scenarios scenarios = { 'Suborbital': [r0, 0, 0, 6e3], # v0 = 6 km/s (below circular) 'Circular': [r0, 0, 0, v_circ], # v0 = circular speed 'Escape': [r0, 0, 0, v_esc], # v0 = escape speed 'Hyperbolic': [r0, 0, 0, 12e3] # v0 = 12 km/s (above escape) } # Time array t = np.linspace(0, 3600, 1000) # 1 hour # Simulate and plot plt.figure(figsize=(10, 10)) for label, (x0, y0, vx0, vy0) in scenarios.items(): state0 = [x0, y0, vx0, vy0] sol = odeint(motion, state0, t) x, y = sol[:, 0], sol[:, 1] plt.plot(x, y, label=label) # Earth circle theta = np.linspace(0, 2 * np.pi, 100) plt.plot(R_E * np.cos(theta), R_E * np.sin(theta), 'k-', label='Earth') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Payload Trajectories Near Earth') plt.legend() plt.axis('equal') plt.grid(True, ls='--') plt.show() # Energy check for label, (x0, y0, vx0, vy0) in scenarios.items(): r = np.sqrt(x0**2 + y0**2) v = np.sqrt(vx0**2 + vy0**2) epsilon = v**2 / 2 - mu / r print(f\"{label}: Energy = {epsilon:.2e} J/kg\") Suborbital: Energy = -4.09e+07 J/kg Circular: Energy = -2.94e+07 J/kg Escape: Energy = 0.00e+00 J/kg Hyperbolic: Energy = 1.31e+07 J/kg Outputs Plot: Shows trajectories: Suborbital: Falls back to Earth. Circular: Stable orbit. Escape: Parabolic exit. Hyperbolic: Open curve. Energy: Suborbital: \\(\\epsilon < 0\\) (bound). Circular: \\(\\epsilon < 0\\) (matches orbit). Escape: \\(\\epsilon \\approx 0\\) . Hyperbolic: \\(\\epsilon > 0\\) . Deliverables Explanation: Trajectories depend on \\(\\epsilon = \\frac{v^2}{2} - \\frac{G M}{r}\\) , dictating elliptical, parabolic, or hyperbolic paths. Graphics: Visualizes each scenario against Earth\u2019s surface. Discussion: Orbital Insertion: \\(v_0 \\approx v_{\\text{circ}}\\) for satellites. Reentry: Low \\(v_0\\) for return missions. Escape: High \\(v_0\\) for deep space. Limits: Assumes point-mass Earth, no drag\u2014real missions adjust for atmosphere and oblateness.","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#trajectories-of-a-freely-released-payload-near-earth","text":"","title":"Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#1-theoretical-foundation","text":"When a payload is released from a moving rocket near Earth, its trajectory depends on its initial position, velocity, and Earth\u2019s gravitational pull. Let\u2019s explore the possible paths and derive the governing equations.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#possible-trajectories","text":"The trajectory is determined by the payload\u2019s specific mechanical energy ( \\(\\epsilon\\) ), which combines kinetic and potential energy per unit mass: $$ \\epsilon = \\frac{v^2}{2} - \\frac{G M}{r} $$ - Elliptical Orbit ( \\(\\epsilon < 0\\) ): The payload stays bound, orbiting Earth (e.g., circular if eccentricity \\(e = 0\\) ). Parabolic Trajectory ( \\(\\epsilon = 0\\) ): The payload escapes to infinity with zero velocity at infinity (escape velocity). Hyperbolic Trajectory ( \\(\\epsilon > 0\\) ): The payload escapes with excess speed, following an open path.","title":"Possible Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#governing-equations","text":"Under Newton\u2019s Law of Gravitation, the acceleration is: $$ \\mathbf{a} = -\\frac{G M}{r^3} \\mathbf{r} $$ Where: - \\(G = 6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) - \\(M = 5.972 \\times 10^{24} \\, \\text{kg}\\) (Earth\u2019s mass) - \\(\\mathbf{r} = (x, y)\\) is the position vector, \\(r = |\\mathbf{r}|\\) . In 2D Cartesian coordinates, the equations of motion are: $$ \\ddot{x} = -\\frac{G M x}{r^3}, \\quad \\ddot{y} = -\\frac{G M y}{r^3} $$","title":"Governing Equations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#2-numerical-analysis","text":"Analytically solving these nonlinear equations is complex, so we\u2019ll use numerical methods (e.g., Runge-Kutta) to compute the trajectory based on initial conditions: position \\(\\mathbf{r}_0\\) , velocity \\(\\mathbf{v}_0\\) , and altitude.","title":"2. Numerical Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-conditions-example","text":"Rocket at altitude 400 km: \\(r_0 = R_E + 400 \\, \\text{km} = 6.371 \\times 10^6 + 4 \\times 10^5 = 6.771 \\times 10^6 \\, \\text{m}\\) . Tangential velocity: \\(v_0 = 7.5 \\, \\text{km/s}\\) (near orbital speed). Release scenarios: Vary direction or magnitude of \\(\\mathbf{v}_0\\) .","title":"Initial Conditions Example"},{"location":"1%20Physics/2%20Gravity/Problem_3/#3-trajectory-types-and-scenarios","text":"Elliptical (Suborbital): If \\(v_0 < v_{\\text{esc}} = \\sqrt{\\frac{2 G M}{r_0}} \\approx 11 \\, \\text{km/s}\\) , the payload orbits or falls back (reentry). Parabolic (Escape): If \\(v_0 = v_{\\text{esc}}\\) , it escapes to infinity. Hyperbolic (Excess): If \\(v_0 > v_{\\text{esc}}\\) , it escapes with leftover speed.","title":"3. Trajectory Types and Scenarios"},{"location":"1%20Physics/2%20Gravity/Problem_3/#applications","text":"Orbital Insertion: Release with \\(v_0 \\approx \\sqrt{\\frac{G M}{r_0}} \\approx 7.8 \\, \\text{km/s}\\) for a circular orbit. Reentry: Low \\(v_0\\) leads to a suborbital arc, intersecting Earth. Escape: High \\(v_0\\) sends the payload beyond Earth\u2019s influence.","title":"Applications"},{"location":"1%20Physics/2%20Gravity/Problem_3/#4-implementation","text":"Here\u2019s a Python script using scipy.integrate.odeint to simulate and visualize trajectories: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Constants G = 6.67430e-11 M = 5.972e24 # Earth mass (kg) R_E = 6.371e6 # Earth radius (m) mu = G * M # Equations of motion def motion(state, t): x, y, vx, vy = state r = np.sqrt(x**2 + y**2) ax = -mu * x / r**3 ay = -mu * y / r**3 return [vx, vy, ax, ay] # Initial conditions r0 = R_E + 4e5 # 400 km altitude v_esc = np.sqrt(2 * mu / r0) # Escape velocity v_circ = np.sqrt(mu / r0) # Circular orbit velocity # Scenarios scenarios = { 'Suborbital': [r0, 0, 0, 6e3], # v0 = 6 km/s (below circular) 'Circular': [r0, 0, 0, v_circ], # v0 = circular speed 'Escape': [r0, 0, 0, v_esc], # v0 = escape speed 'Hyperbolic': [r0, 0, 0, 12e3] # v0 = 12 km/s (above escape) } # Time array t = np.linspace(0, 3600, 1000) # 1 hour # Simulate and plot plt.figure(figsize=(10, 10)) for label, (x0, y0, vx0, vy0) in scenarios.items(): state0 = [x0, y0, vx0, vy0] sol = odeint(motion, state0, t) x, y = sol[:, 0], sol[:, 1] plt.plot(x, y, label=label) # Earth circle theta = np.linspace(0, 2 * np.pi, 100) plt.plot(R_E * np.cos(theta), R_E * np.sin(theta), 'k-', label='Earth') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Payload Trajectories Near Earth') plt.legend() plt.axis('equal') plt.grid(True, ls='--') plt.show() # Energy check for label, (x0, y0, vx0, vy0) in scenarios.items(): r = np.sqrt(x0**2 + y0**2) v = np.sqrt(vx0**2 + vy0**2) epsilon = v**2 / 2 - mu / r print(f\"{label}: Energy = {epsilon:.2e} J/kg\") Suborbital: Energy = -4.09e+07 J/kg Circular: Energy = -2.94e+07 J/kg Escape: Energy = 0.00e+00 J/kg Hyperbolic: Energy = 1.31e+07 J/kg","title":"4. Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#outputs","text":"Plot: Shows trajectories: Suborbital: Falls back to Earth. Circular: Stable orbit. Escape: Parabolic exit. Hyperbolic: Open curve. Energy: Suborbital: \\(\\epsilon < 0\\) (bound). Circular: \\(\\epsilon < 0\\) (matches orbit). Escape: \\(\\epsilon \\approx 0\\) . Hyperbolic: \\(\\epsilon > 0\\) .","title":"Outputs"},{"location":"1%20Physics/2%20Gravity/Problem_3/#deliverables","text":"Explanation: Trajectories depend on \\(\\epsilon = \\frac{v^2}{2} - \\frac{G M}{r}\\) , dictating elliptical, parabolic, or hyperbolic paths. Graphics: Visualizes each scenario against Earth\u2019s surface. Discussion: Orbital Insertion: \\(v_0 \\approx v_{\\text{circ}}\\) for satellites. Reentry: Low \\(v_0\\) for return missions. Escape: High \\(v_0\\) for deep space. Limits: Assumes point-mass Earth, no drag\u2014real missions adjust for atmosphere and oblateness.","title":"Deliverables"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}