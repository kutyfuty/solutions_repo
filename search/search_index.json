{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion is a classic application of Newton\u2019s laws in two dimensions. Let\u2019s derive the governing equations from first principles, assuming no air resistance for now (we\u2019ll revisit this later). Deriving the Equations of Motion A projectile is launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) from the horizontal. The acceleration due to gravity \\(g\\) acts downward. We break the motion into horizontal (x) and vertical (y) components: Initial conditions: Horizontal velocity: \\(v_{x0} = v_0 \\cos\\theta\\) Vertical velocity: \\(v_{y0} = v_0 \\sin\\theta\\) Initial position: \\((x_0, y_0) = (0, 0)\\) (assuming launch from the origin) Acceleration: Horizontal: \\(a_x = 0\\) Vertical: \\(a_y = -g\\) Using the kinematic equations \\(v = v_0 + at\\) and \\(s = s_0 + v_0 t + \\frac{1}{2} a t^2\\) : Horizontal motion: $$ x(t) = v_{x0} t = v_0 \\cos\\theta \\cdot t $$ Vertical motion: $$ y(t) = v_{y0} t + \\frac{1}{2} a_y t^2 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Time of Flight The projectile hits the ground when \\(y(t) = 0\\) . Solve: $$ v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 = 0 $$ Factorize: $$ t \\left( v_0 \\sin\\theta - \\frac{1}{2} g t \\right) = 0 $$ Solutions: \\(t = 0\\) (launch) or: $$ t = \\frac{2 v_0 \\sin\\theta}{g} $$ This is the time of flight \\(T\\) . Range Equation The horizontal range \\(R\\) is the distance traveled when \\(t = T\\) : $$ R = x(T) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} $$ Using the identity \\(\\sin 2\\theta = 2 \\sin\\theta \\cos\\theta\\) : $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$ Family of Solutions This equation reveals a family of solutions parameterized by: - \\(v_0\\) : Initial velocity scales the range quadratically. - \\(g\\) : Gravitational acceleration inversely affects the range. - \\(\\theta\\) : The angle determines the sinusoidal variation. 2. Analysis of the Range Dependence on Angle The term \\(\\sin 2\\theta\\) peaks at 1 when \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) , giving the maximum range: $$ R_{\\text{max}} = \\frac{v_0^2}{g} $$ - At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(\\sin 2\\theta = 0\\) , so \\(R = 0\\) . - The range is symmetric about \\(45^\\circ\\) (e.g., \\(\\theta = 30^\\circ\\) and \\(60^\\circ\\) yield the same range). Influence of Parameters Initial Velocity ( \\(v_0\\) ) : Doubling \\(v_0\\) quadruples \\(R\\) , due to the \\(v_0^2\\) term. Gravity ( \\(g\\) ) : On the Moon ( \\(g \\approx 1.62 \\, \\text{m/s}^2\\) ) versus Earth ( \\(g \\approx 9.81 \\, \\text{m/s}^2\\) ), the range increases significantly for the same \\(v_0\\) and \\(\\theta\\) . 3. Practical Applications Sports : In soccer or golf, players adjust \\(\\theta\\) and \\(v_0\\) to optimize range, though air resistance and spin complicate the ideal \\(45^\\circ\\) . Engineering : Artillery design considers terrain and drag, requiring adjusted angles. Astrophysics : Trajectories on other planets (different \\(g\\) ) or in space (negligible \\(g\\) ) adapt this model. For uneven terrain (launch height \\(h \\neq 0\\) ), the time of flight becomes the positive root of: $$ h + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 = 0 $$ This modifies the range, often reducing the optimal angle below \\(45^\\circ\\) . 4. Implementation Here\u2019s a Python script to simulate and visualize the range versus angle: import numpy as np import matplotlib.pyplot as plt def range_projectile(v0, theta_deg, g=9.81): theta = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta)) / g # Parameters v0_values = [10, 20, 30] # m/s g_values = [9.81, 1.62] # Earth, Moon theta = np.linspace(0, 90, 91) # 0 to 90 degrees # Plotting plt.figure(figsize=(10, 6)) for v0 in v0_values: for g in g_values: R = range_projectile(v0, theta, g) label = f'v0 = {v0} m/s, g = {g} m/s\u00b2' plt.plot(theta, R, label=label) plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() # Maximum range example v0 = 20 g = 9.81 theta_max = 45 R_max = range_projectile(v0, theta_max, g) print(f\"Max range at 45\u00b0 with v0 = {v0} m/s, g = {g} m/s\u00b2: {R_max:.2f} m\") Output Explanation The plot shows \\(R\\) versus \\(\\theta\\) for different \\(v_0\\) and \\(g\\) . Peaks at \\(45^\\circ\\) confirm the theoretical maximum. Higher \\(v_0\\) or lower \\(g\\) increases the range, as expected. Discussion and Limitations Idealized Model This model assumes: - No air resistance. - Flat terrain ( \\(h = 0\\) ). - Constant \\(g\\) . Real-World Adjustments Drag : Introduces a velocity-dependent force, reducing range and shifting the optimal angle (typically < \\(45^\\circ\\) ). Wind : Adds a horizontal force, altering the trajectory. Numerical Simulation : For drag, solve the differential equations numerically (e.g., using Runge-Kutta methods) since no closed-form solution exists. Suggestions Incorporate drag with \\(F_d = -k v\\) or terrain effects by adjusting the landing condition. Simulate these using Python libraries like scipy.integrate.odeint .","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is a classic application of Newton\u2019s laws in two dimensions. Let\u2019s derive the governing equations from first principles, assuming no air resistance for now (we\u2019ll revisit this later).","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deriving-the-equations-of-motion","text":"A projectile is launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) from the horizontal. The acceleration due to gravity \\(g\\) acts downward. We break the motion into horizontal (x) and vertical (y) components: Initial conditions: Horizontal velocity: \\(v_{x0} = v_0 \\cos\\theta\\) Vertical velocity: \\(v_{y0} = v_0 \\sin\\theta\\) Initial position: \\((x_0, y_0) = (0, 0)\\) (assuming launch from the origin) Acceleration: Horizontal: \\(a_x = 0\\) Vertical: \\(a_y = -g\\) Using the kinematic equations \\(v = v_0 + at\\) and \\(s = s_0 + v_0 t + \\frac{1}{2} a t^2\\) : Horizontal motion: $$ x(t) = v_{x0} t = v_0 \\cos\\theta \\cdot t $$ Vertical motion: $$ y(t) = v_{y0} t + \\frac{1}{2} a_y t^2 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$","title":"Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"The projectile hits the ground when \\(y(t) = 0\\) . Solve: $$ v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 = 0 $$ Factorize: $$ t \\left( v_0 \\sin\\theta - \\frac{1}{2} g t \\right) = 0 $$ Solutions: \\(t = 0\\) (launch) or: $$ t = \\frac{2 v_0 \\sin\\theta}{g} $$ This is the time of flight \\(T\\) .","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-equation","text":"The horizontal range \\(R\\) is the distance traveled when \\(t = T\\) : $$ R = x(T) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} $$ Using the identity \\(\\sin 2\\theta = 2 \\sin\\theta \\cos\\theta\\) : $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$","title":"Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"This equation reveals a family of solutions parameterized by: - \\(v_0\\) : Initial velocity scales the range quadratically. - \\(g\\) : Gravitational acceleration inversely affects the range. - \\(\\theta\\) : The angle determines the sinusoidal variation.","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-angle","text":"The term \\(\\sin 2\\theta\\) peaks at 1 when \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) , giving the maximum range: $$ R_{\\text{max}} = \\frac{v_0^2}{g} $$ - At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(\\sin 2\\theta = 0\\) , so \\(R = 0\\) . - The range is symmetric about \\(45^\\circ\\) (e.g., \\(\\theta = 30^\\circ\\) and \\(60^\\circ\\) yield the same range).","title":"Dependence on Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-parameters","text":"Initial Velocity ( \\(v_0\\) ) : Doubling \\(v_0\\) quadruples \\(R\\) , due to the \\(v_0^2\\) term. Gravity ( \\(g\\) ) : On the Moon ( \\(g \\approx 1.62 \\, \\text{m/s}^2\\) ) versus Earth ( \\(g \\approx 9.81 \\, \\text{m/s}^2\\) ), the range increases significantly for the same \\(v_0\\) and \\(\\theta\\) .","title":"Influence of Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports : In soccer or golf, players adjust \\(\\theta\\) and \\(v_0\\) to optimize range, though air resistance and spin complicate the ideal \\(45^\\circ\\) . Engineering : Artillery design considers terrain and drag, requiring adjusted angles. Astrophysics : Trajectories on other planets (different \\(g\\) ) or in space (negligible \\(g\\) ) adapt this model. For uneven terrain (launch height \\(h \\neq 0\\) ), the time of flight becomes the positive root of: $$ h + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 = 0 $$ This modifies the range, often reducing the optimal angle below \\(45^\\circ\\) .","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Here\u2019s a Python script to simulate and visualize the range versus angle: import numpy as np import matplotlib.pyplot as plt def range_projectile(v0, theta_deg, g=9.81): theta = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta)) / g # Parameters v0_values = [10, 20, 30] # m/s g_values = [9.81, 1.62] # Earth, Moon theta = np.linspace(0, 90, 91) # 0 to 90 degrees # Plotting plt.figure(figsize=(10, 6)) for v0 in v0_values: for g in g_values: R = range_projectile(v0, theta, g) label = f'v0 = {v0} m/s, g = {g} m/s\u00b2' plt.plot(theta, R, label=label) plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() # Maximum range example v0 = 20 g = 9.81 theta_max = 45 R_max = range_projectile(v0, theta_max, g) print(f\"Max range at 45\u00b0 with v0 = {v0} m/s, g = {g} m/s\u00b2: {R_max:.2f} m\")","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#output-explanation","text":"The plot shows \\(R\\) versus \\(\\theta\\) for different \\(v_0\\) and \\(g\\) . Peaks at \\(45^\\circ\\) confirm the theoretical maximum. Higher \\(v_0\\) or lower \\(g\\) increases the range, as expected.","title":"Output Explanation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#discussion-and-limitations","text":"","title":"Discussion and Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#idealized-model","text":"This model assumes: - No air resistance. - Flat terrain ( \\(h = 0\\) ). - Constant \\(g\\) .","title":"Idealized Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#real-world-adjustments","text":"Drag : Introduces a velocity-dependent force, reducing range and shifting the optimal angle (typically < \\(45^\\circ\\) ). Wind : Adds a horizontal force, altering the trajectory. Numerical Simulation : For drag, solve the differential equations numerically (e.g., using Runge-Kutta methods) since no closed-form solution exists.","title":"Real-World Adjustments"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#suggestions","text":"Incorporate drag with \\(F_d = -k v\\) or terrain effects by adjusting the landing condition. Simulate these using Python libraries like scipy.integrate.odeint .","title":"Suggestions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation The forced damped pendulum is governed by a second-order nonlinear differential equation that incorporates gravity (restoring force), damping, and an external periodic force. Let\u2019s derive it step-by-step. Governing Equation Consider a pendulum of length \\(l\\) and mass \\(m\\) , with angle \\(\\theta\\) from the vertical: Restoring force: Gravitational torque, \\(-\\frac{mg}{l} \\sin\\theta\\) . Damping: Proportional to angular velocity, \\(-b \\dot{\\theta}\\) (where \\(b\\) is the damping coefficient). External force: A periodic driving torque, \\(F_0 \\cos(\\omega t)\\) , where \\(F_0\\) is the amplitude and \\(\\omega\\) is the driving frequency. The equation of motion, from Newton\u2019s second law for rotation ( \\(I \\ddot{\\theta} = \\sum \\tau\\) ), is: $$ ml^2 \\ddot{\\theta} + b \\dot{\\theta} + mg \\sin\\theta = F_0 \\cos(\\omega t) $$ Divide through by \\(ml^2\\) and define: \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) (natural frequency), \\(\\gamma = \\frac{b}{ml^2}\\) (damping rate), \\(f = \\frac{F_0}{ml^2}\\) (driving amplitude per unit inertia). The standard form becomes: $$ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = f \\cos(\\omega t) $$ Small-Angle Approximation For small \\(\\theta\\) , \\(\\sin\\theta \\approx \\theta\\) , simplifying the equation to a linear forced damped oscillator: $$ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = f \\cos(\\omega t) $$ This is solvable analytically: Homogeneous solution: \\(\\theta_h(t) = e^{-\\frac{\\gamma}{2} t} [A \\cos(\\omega_d t) + B \\sin(\\omega_d t)]\\) , where \\(\\omega_d = \\sqrt{\\omega_0^2 - (\\frac{\\gamma}{2})^2}\\) (damped frequency). Particular solution: \\(\\theta_p(t) = C \\cos(\\omega t - \\phi)\\) , with amplitude \\(C = \\frac{f}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}}\\) and phase \\(\\phi = \\tan^{-1}\\left(\\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2}\\right)\\) . Resonance Resonance occurs when \\(\\omega \\approx \\omega_0\\) , maximizing \\(C\\) . For light damping ( \\(\\gamma\\) small), the amplitude peaks sharply, amplifying the pendulum\u2019s response. 2. Analysis of Dynamics Parameter Effects Damping ( \\(\\gamma\\) ) : High \\(\\gamma\\) suppresses oscillations; low \\(\\gamma\\) allows sustained or chaotic motion. Driving Amplitude ( \\(f\\) ) : Small \\(f\\) yields regular oscillations; large \\(f\\) can push the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance occurs; far from \\(\\omega_0\\) , motion may become quasiperiodic or chaotic. Transition to Chaos The nonlinear term \\(\\sin\\theta\\) (absent in the small-angle case) introduces complexity: - Periodic Motion: At low \\(f\\) , the pendulum locks to the driving frequency. - Chaos: High \\(f\\) or specific \\(\\omega\\) values lead to unpredictable, aperiodic motion, sensitive to initial conditions. 3. Practical Applications Energy Harvesting: Oscillating systems (e.g., piezoelectric devices) convert motion to electricity, optimized near resonance. Suspension Bridges: External forces (wind) can drive oscillations, requiring damping to prevent collapse (e.g., Tacoma Narrows). Circuits: Driven RLC circuits mirror this behavior, used in signal processing. 4. Implementation Let\u2019s simulate this using Python with the Runge-Kutta method (RK4) for the nonlinear equation, visualizing motion, phase portraits, and Poincar\u00e9 sections. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def pendulum_deriv(state, t, gamma, omega0, f, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -gamma * theta_dot - omega0**2 * np.sin(theta) + f * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] # Parameters g = 9.81 # m/s^2 l = 1.0 # m omega0 = np.sqrt(g / l) gamma = 0.5 # damping coefficient f = 1.2 # driving amplitude omega = 2/3 * omega0 # driving frequency # Time array t = np.linspace(0, 50, 1000) # Initial conditions theta0 = 0.1 # radians theta_dot0 = 0.0 state0 = [theta0, theta_dot0] # Solve ODE sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) theta, theta_dot = sol[:, 0], sol[:, 1] # Plots plt.figure(figsize=(12, 8)) # Time series plt.subplot(2, 2, 1) plt.plot(t, theta, 'b') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.title('Pendulum Motion') # Phase portrait plt.subplot(2, 2, 2) plt.plot(theta, theta_dot, 'r') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Phase Portrait') # Poincar\u00e9 section (at t = 2\u03c0/\u03c9 multiples) poincare_t = t[::int(2 * np.pi / (omega * (t[1] - t[0])))] poincare_theta = [] poincare_theta_dot = [] for ti in poincare_t: idx = np.argmin(np.abs(t - ti)) poincare_theta.append(theta[idx]) poincare_theta_dot.append(theta_dot[idx]) plt.subplot(2, 2, 3) plt.scatter(poincare_theta, poincare_theta_dot, s=5, c='g') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Poincar\u00e9 Section') plt.tight_layout() plt.show() # Vary parameters for resonance and chaos f_values = [0.5, 1.2, 1.5] # Explore different amplitudes plt.figure(figsize=(12, 4)) for i, f in enumerate(f_values): sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) plt.subplot(1, 3, i+1) plt.plot(t, sol[:, 0]) plt.title(f'f = {f}') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.tight_layout() plt.show() Output Explanation Time Series: Shows \\(\\theta(t)\\) \u2014regular for small \\(f\\) , chaotic for large \\(f\\) . Phase Portrait: A closed loop indicates periodic motion; scattered points suggest chaos. Poincar\u00e9 Section: Discrete points for periodic motion; a cloud for chaos. Parameter Variation: Low \\(f\\) (0.5) gives damped oscillations, higher \\(f\\) (1.5) shows chaotic behavior. Deliverables Solutions: Linear case has damped + driven terms; nonlinear requires numerical methods. Graphics: Time series, phase portraits, and Poincar\u00e9 sections illustrate dynamics. Limitations: Assumes constant \\(\\gamma\\) , periodic forcing, and no friction irregularities. Extensions: Add nonlinear damping ( \\(\\gamma |\\dot{\\theta}| \\dot{\\theta}\\) ) or stochastic forcing. Discussion The forced damped pendulum bridges simple oscillators and complex systems. Resonance amplifies energy transfer, while chaos reveals sensitivity to conditions\u2014key for engineering and physics. For deeper analysis, bifurcation diagrams (varying \\(f\\) or \\(\\omega\\) ) could map transitions to chaos.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The forced damped pendulum is governed by a second-order nonlinear differential equation that incorporates gravity (restoring force), damping, and an external periodic force. Let\u2019s derive it step-by-step.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"Consider a pendulum of length \\(l\\) and mass \\(m\\) , with angle \\(\\theta\\) from the vertical: Restoring force: Gravitational torque, \\(-\\frac{mg}{l} \\sin\\theta\\) . Damping: Proportional to angular velocity, \\(-b \\dot{\\theta}\\) (where \\(b\\) is the damping coefficient). External force: A periodic driving torque, \\(F_0 \\cos(\\omega t)\\) , where \\(F_0\\) is the amplitude and \\(\\omega\\) is the driving frequency. The equation of motion, from Newton\u2019s second law for rotation ( \\(I \\ddot{\\theta} = \\sum \\tau\\) ), is: $$ ml^2 \\ddot{\\theta} + b \\dot{\\theta} + mg \\sin\\theta = F_0 \\cos(\\omega t) $$ Divide through by \\(ml^2\\) and define: \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) (natural frequency), \\(\\gamma = \\frac{b}{ml^2}\\) (damping rate), \\(f = \\frac{F_0}{ml^2}\\) (driving amplitude per unit inertia). The standard form becomes: $$ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = f \\cos(\\omega t) $$","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small \\(\\theta\\) , \\(\\sin\\theta \\approx \\theta\\) , simplifying the equation to a linear forced damped oscillator: $$ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = f \\cos(\\omega t) $$ This is solvable analytically: Homogeneous solution: \\(\\theta_h(t) = e^{-\\frac{\\gamma}{2} t} [A \\cos(\\omega_d t) + B \\sin(\\omega_d t)]\\) , where \\(\\omega_d = \\sqrt{\\omega_0^2 - (\\frac{\\gamma}{2})^2}\\) (damped frequency). Particular solution: \\(\\theta_p(t) = C \\cos(\\omega t - \\phi)\\) , with amplitude \\(C = \\frac{f}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}}\\) and phase \\(\\phi = \\tan^{-1}\\left(\\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2}\\right)\\) .","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Resonance occurs when \\(\\omega \\approx \\omega_0\\) , maximizing \\(C\\) . For light damping ( \\(\\gamma\\) small), the amplitude peaks sharply, amplifying the pendulum\u2019s response.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-effects","text":"Damping ( \\(\\gamma\\) ) : High \\(\\gamma\\) suppresses oscillations; low \\(\\gamma\\) allows sustained or chaotic motion. Driving Amplitude ( \\(f\\) ) : Small \\(f\\) yields regular oscillations; large \\(f\\) can push the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance occurs; far from \\(\\omega_0\\) , motion may become quasiperiodic or chaotic.","title":"Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"The nonlinear term \\(\\sin\\theta\\) (absent in the small-angle case) introduces complexity: - Periodic Motion: At low \\(f\\) , the pendulum locks to the driving frequency. - Chaos: High \\(f\\) or specific \\(\\omega\\) values lead to unpredictable, aperiodic motion, sensitive to initial conditions.","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy Harvesting: Oscillating systems (e.g., piezoelectric devices) convert motion to electricity, optimized near resonance. Suspension Bridges: External forces (wind) can drive oscillations, requiring damping to prevent collapse (e.g., Tacoma Narrows). Circuits: Driven RLC circuits mirror this behavior, used in signal processing.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"Let\u2019s simulate this using Python with the Runge-Kutta method (RK4) for the nonlinear equation, visualizing motion, phase portraits, and Poincar\u00e9 sections. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def pendulum_deriv(state, t, gamma, omega0, f, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -gamma * theta_dot - omega0**2 * np.sin(theta) + f * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] # Parameters g = 9.81 # m/s^2 l = 1.0 # m omega0 = np.sqrt(g / l) gamma = 0.5 # damping coefficient f = 1.2 # driving amplitude omega = 2/3 * omega0 # driving frequency # Time array t = np.linspace(0, 50, 1000) # Initial conditions theta0 = 0.1 # radians theta_dot0 = 0.0 state0 = [theta0, theta_dot0] # Solve ODE sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) theta, theta_dot = sol[:, 0], sol[:, 1] # Plots plt.figure(figsize=(12, 8)) # Time series plt.subplot(2, 2, 1) plt.plot(t, theta, 'b') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.title('Pendulum Motion') # Phase portrait plt.subplot(2, 2, 2) plt.plot(theta, theta_dot, 'r') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Phase Portrait') # Poincar\u00e9 section (at t = 2\u03c0/\u03c9 multiples) poincare_t = t[::int(2 * np.pi / (omega * (t[1] - t[0])))] poincare_theta = [] poincare_theta_dot = [] for ti in poincare_t: idx = np.argmin(np.abs(t - ti)) poincare_theta.append(theta[idx]) poincare_theta_dot.append(theta_dot[idx]) plt.subplot(2, 2, 3) plt.scatter(poincare_theta, poincare_theta_dot, s=5, c='g') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Poincar\u00e9 Section') plt.tight_layout() plt.show() # Vary parameters for resonance and chaos f_values = [0.5, 1.2, 1.5] # Explore different amplitudes plt.figure(figsize=(12, 4)) for i, f in enumerate(f_values): sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) plt.subplot(1, 3, i+1) plt.plot(t, sol[:, 0]) plt.title(f'f = {f}') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.tight_layout() plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#output-explanation","text":"Time Series: Shows \\(\\theta(t)\\) \u2014regular for small \\(f\\) , chaotic for large \\(f\\) . Phase Portrait: A closed loop indicates periodic motion; scattered points suggest chaos. Poincar\u00e9 Section: Discrete points for periodic motion; a cloud for chaos. Parameter Variation: Low \\(f\\) (0.5) gives damped oscillations, higher \\(f\\) (1.5) shows chaotic behavior.","title":"Output Explanation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#deliverables","text":"Solutions: Linear case has damped + driven terms; nonlinear requires numerical methods. Graphics: Time series, phase portraits, and Poincar\u00e9 sections illustrate dynamics. Limitations: Assumes constant \\(\\gamma\\) , periodic forcing, and no friction irregularities. Extensions: Add nonlinear damping ( \\(\\gamma |\\dot{\\theta}| \\dot{\\theta}\\) ) or stochastic forcing.","title":"Deliverables"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#discussion","text":"The forced damped pendulum bridges simple oscillators and complex systems. Resonance amplifies energy transfer, while chaos reveals sensitivity to conditions\u2014key for engineering and physics. For deeper analysis, bifurcation diagrams (varying \\(f\\) or \\(\\omega\\) ) could map transitions to chaos.","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}